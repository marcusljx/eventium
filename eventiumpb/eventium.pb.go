// Code generated by protoc-gen-go.
// source: eventium.proto
// DO NOT EDIT!

/*
Package eventiumpb is a generated protocol buffer package.

It is generated from these files:
	eventium.proto

It has these top-level messages:
	GetEventByIDRequest
	PostEventResponse
	Location
	Eventum
*/
package eventiumpb

import "github.com/golang/protobuf/proto"
import "fmt"
import "math"

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// =============================== MESSAGES
type GetEventByIDRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetEventByIDRequest) Reset()                    { *m = GetEventByIDRequest{} }
func (m *GetEventByIDRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEventByIDRequest) ProtoMessage()               {}
func (*GetEventByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetEventByIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PostEventResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	EventID string `protobuf:"bytes,2,opt,name=eventID" json:"eventID,omitempty"`
}

func (m *PostEventResponse) Reset()                    { *m = PostEventResponse{} }
func (m *PostEventResponse) String() string            { return proto.CompactTextString(m) }
func (*PostEventResponse) ProtoMessage()               {}
func (*PostEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PostEventResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PostEventResponse) GetEventID() string {
	if m != nil {
		return m.EventID
	}
	return ""
}

// =============================== OBJECTS
type Location struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Location) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Location) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Eventum struct {
	Location  *Location `protobuf:"bytes,16,opt,name=location" json:"location,omitempty"`
	Begin     int64     `protobuf:"varint,17,opt,name=begin" json:"begin,omitempty"`
	End       int64     `protobuf:"varint,18,opt,name=end" json:"end,omitempty"`
	Headline  string    `protobuf:"bytes,19,opt,name=headline" json:"headline,omitempty"`
	MediaData []byte    `protobuf:"bytes,20,opt,name=mediaData,proto3" json:"mediaData,omitempty"`
	Tags      []string  `protobuf:"bytes,21,rep,name=tags" json:"tags,omitempty"`
}

func (m *Eventum) Reset()                    { *m = Eventum{} }
func (m *Eventum) String() string            { return proto.CompactTextString(m) }
func (*Eventum) ProtoMessage()               {}
func (*Eventum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Eventum) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Eventum) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *Eventum) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Eventum) GetHeadline() string {
	if m != nil {
		return m.Headline
	}
	return ""
}

func (m *Eventum) GetMediaData() []byte {
	if m != nil {
		return m.MediaData
	}
	return nil
}

func (m *Eventum) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*GetEventByIDRequest)(nil), "eventiumpb.GetEventByIDRequest")
	proto.RegisterType((*PostEventResponse)(nil), "eventiumpb.PostEventResponse")
	proto.RegisterType((*Location)(nil), "eventiumpb.Location")
	proto.RegisterType((*Eventum)(nil), "eventiumpb.Eventum")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Eventium service

type EventiumClient interface {
	PostEvent(ctx context.Context, in *Eventum, opts ...grpc.CallOption) (*PostEventResponse, error)
	GetEventByID(ctx context.Context, in *GetEventByIDRequest, opts ...grpc.CallOption) (*Eventum, error)
}

type eventiumClient struct {
	cc *grpc.ClientConn
}

func NewEventiumClient(cc *grpc.ClientConn) EventiumClient {
	return &eventiumClient{cc}
}

func (c *eventiumClient) PostEvent(ctx context.Context, in *Eventum, opts ...grpc.CallOption) (*PostEventResponse, error) {
	out := new(PostEventResponse)
	err := grpc.Invoke(ctx, "/eventiumpb.Eventium/PostEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventiumClient) GetEventByID(ctx context.Context, in *GetEventByIDRequest, opts ...grpc.CallOption) (*Eventum, error) {
	out := new(Eventum)
	err := grpc.Invoke(ctx, "/eventiumpb.Eventium/GetEventByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Eventium service

type EventiumServer interface {
	PostEvent(context.Context, *Eventum) (*PostEventResponse, error)
	GetEventByID(context.Context, *GetEventByIDRequest) (*Eventum, error)
}

func RegisterEventiumServer(s *grpc.Server, srv EventiumServer) {
	s.RegisterService(&_Eventium_serviceDesc, srv)
}

func _Eventium_PostEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Eventum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventiumServer).PostEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventiumpb.Eventium/PostEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventiumServer).PostEvent(ctx, req.(*Eventum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eventium_GetEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventiumServer).GetEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventiumpb.Eventium/GetEventByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventiumServer).GetEventByID(ctx, req.(*GetEventByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Eventium_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventiumpb.Eventium",
	HandlerType: (*EventiumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostEvent",
			Handler:    _Eventium_PostEvent_Handler,
		},
		{
			MethodName: "GetEventByID",
			Handler:    _Eventium_GetEventByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eventium.proto",
}

func init() { proto.RegisterFile("eventium.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xef, 0x6a, 0xf2, 0x30,
	0x14, 0xc6, 0x4d, 0x7d, 0xdf, 0xd9, 0x9e, 0x89, 0xe8, 0xd1, 0x41, 0x90, 0x8d, 0x95, 0xc2, 0x46,
	0x3f, 0xc9, 0x70, 0x57, 0xb0, 0xa1, 0x13, 0x61, 0x1f, 0x46, 0xee, 0x20, 0xda, 0x83, 0x0b, 0x68,
	0xe2, 0x96, 0x74, 0xe8, 0x85, 0xec, 0x42, 0x76, 0x87, 0xa3, 0xd1, 0xd6, 0xc2, 0xfc, 0x96, 0xdf,
	0x93, 0xe7, 0xfc, 0x87, 0x0e, 0x7d, 0x91, 0x76, 0x2a, 0xdf, 0x8c, 0xb6, 0x9f, 0xc6, 0x19, 0x84,
	0x92, 0xb7, 0x8b, 0xe4, 0x0e, 0xfa, 0x33, 0x72, 0xd3, 0x42, 0x78, 0xde, 0xcf, 0x27, 0x82, 0x3e,
	0x72, 0xb2, 0x0e, 0x3b, 0x10, 0xa8, 0x8c, 0xb3, 0x98, 0xa5, 0x91, 0x08, 0x54, 0x96, 0xcc, 0xa0,
	0xf7, 0x66, 0xec, 0xc1, 0x27, 0xc8, 0x6e, 0x8d, 0xb6, 0x84, 0x1c, 0x5a, 0x36, 0x5f, 0x2e, 0xc9,
	0x5a, 0xef, 0x0c, 0x45, 0x89, 0xc5, 0x8f, 0xaf, 0x31, 0x9f, 0xf0, 0xc0, 0xe7, 0x28, 0x31, 0xb9,
	0x87, 0xf0, 0xd5, 0x2c, 0xa5, 0x53, 0x46, 0x63, 0x1b, 0xd8, 0xce, 0x47, 0x06, 0x82, 0xed, 0x0a,
	0xda, 0x7b, 0x77, 0x20, 0xd8, 0x3e, 0xf9, 0x61, 0xd0, 0xf2, 0xd5, 0xf2, 0x0d, 0x3e, 0x40, 0xb8,
	0x3e, 0xc6, 0xf0, 0x6e, 0xcc, 0xd2, 0xcb, 0xf1, 0x60, 0x74, 0x1a, 0x61, 0x54, 0xe6, 0x13, 0x95,
	0x0b, 0x07, 0xf0, 0x7f, 0x41, 0x2b, 0xa5, 0x79, 0x2f, 0x66, 0x69, 0x53, 0x1c, 0x00, 0xbb, 0xd0,
	0x24, 0x9d, 0x71, 0xf4, 0x5a, 0xf1, 0xc4, 0x21, 0x84, 0xef, 0x24, 0xb3, 0xb5, 0xd2, 0xc4, 0xfb,
	0xbe, 0xd1, 0x8a, 0xf1, 0x1a, 0xa2, 0x0d, 0x65, 0x4a, 0x4e, 0xa4, 0x93, 0x7c, 0x10, 0xb3, 0xb4,
	0x2d, 0x4e, 0x02, 0x22, 0xfc, 0x73, 0x72, 0x65, 0xf9, 0x55, 0xdc, 0x4c, 0x23, 0xe1, 0xdf, 0xe3,
	0x6f, 0x06, 0xe1, 0xf4, 0xd8, 0x17, 0x3e, 0x41, 0x54, 0x6d, 0x0c, 0xfb, 0xf5, 0x7e, 0x8f, 0x63,
	0x0d, 0x6f, 0xea, 0xe2, 0x9f, 0xed, 0x26, 0x0d, 0x7c, 0x81, 0x76, 0xfd, 0x36, 0x78, 0x5b, 0x0f,
	0x38, 0x73, 0xb5, 0xe1, 0xb9, 0x32, 0x49, 0x63, 0x71, 0xe1, 0xcf, 0xfe, 0xf8, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x59, 0x02, 0x84, 0x14, 0x08, 0x02, 0x00, 0x00,
}
